import 'reflect-metadata';
import { RouteParamtypes } from '@nestjs/common/enums/route-paramtypes.enum';
import { Controller, Transform } from '@nestjs/common/interfaces';
import { RouteParamsMetadata } from '@nestjs/common/utils';
import { IRouteParamsFactory } from './interfaces/route-params-factory.interface';
import { PipesContextCreator } from './../pipes/pipes-context-creator';
import { PipesConsumer } from './../pipes/pipes-consumer';
import { ParamData, PipeTransform } from '@nestjs/common';
export interface ParamProperties {
    index: number;
    value: any;
    type: RouteParamtypes;
    data: ParamData;
    pipes: PipeTransform[];
}
export declare class RouterExecutionContext {
    private readonly paramsFactory;
    private readonly pipesContextCreator;
    private readonly pipesConsumer;
    constructor(paramsFactory: IRouteParamsFactory, pipesContextCreator: PipesContextCreator, pipesConsumer: PipesConsumer);
    create(instance: Controller, callback: (...args) => any): any;
    mapParamType(key: string): RouteParamtypes;
    reflectCallbackMetadata(instance: Controller, callback: (...args) => any): RouteParamsMetadata;
    reflectCallbackParamtypes(instance: Controller, callback: (...args) => any): any[];
    getArgumentsLength(keys: string[], metadata: RouteParamsMetadata): number;
    createNullArray(length: number): any[];
    exchangeKeysForValues(keys: string[], metadata: RouteParamsMetadata, {req, res, next}: {
        req: any;
        res: any;
        next: any;
    }): ParamProperties[];
    getParamValue<T>(value: T, {metatype, type, data}: {
        metatype: any;
        type: any;
        data: any;
    }, transforms: Transform<any>[]): Promise<any>;
}
