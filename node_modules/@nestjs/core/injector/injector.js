"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const unknown_dependencies_exception_1 = require("../errors/exceptions/unknown-dependencies.exception");
const runtime_exception_1 = require("../errors/exceptions/runtime.exception");
const shared_utils_1 = require("@nestjs/common/utils/shared.utils");
const constants_1 = require("@nestjs/common/constants");
class Injector {
    loadInstanceOfMiddleware(wrapper, collection, module) {
        const { metatype } = wrapper;
        const currentMetatype = collection.get(metatype.name);
        if (currentMetatype.instance !== null)
            return;
        this.resolveConstructorParams(wrapper, module, null, null, (instances) => {
            collection.set(metatype.name, {
                instance: new metatype(...instances),
                metatype,
            });
        });
    }
    loadInstanceOfRoute(wrapper, module) {
        const routes = module.routes;
        this.loadInstance(wrapper, routes, module);
    }
    loadPrototypeOfInstance({ metatype, name }, collection) {
        if (!collection)
            return;
        const target = collection.get(name);
        if (target.isResolved || !shared_utils_1.isNil(target.inject))
            return;
        collection.set(name, Object.assign({}, collection.get(name), { instance: Object.create(metatype.prototype) }));
    }
    loadInstanceOfComponent(wrapper, module, context = []) {
        const components = module.components;
        this.loadInstance(wrapper, components, module, context);
    }
    loadInstance(wrapper, collection, module, context = []) {
        const { metatype, name, inject } = wrapper;
        const currentMetatype = collection.get(name);
        if (shared_utils_1.isUndefined(currentMetatype)) {
            throw new runtime_exception_1.RuntimeException('');
        }
        if (currentMetatype.isResolved)
            return;
        this.resolveConstructorParams(wrapper, module, inject, context, (instances) => {
            if (shared_utils_1.isNil(inject)) {
                currentMetatype.instance = Object.assign(currentMetatype.instance, new metatype(...instances));
            }
            else {
                currentMetatype.instance = currentMetatype.metatype(...instances);
            }
            currentMetatype.isResolved = true;
        });
    }
    resolveConstructorParams(wrapper, module, inject, context, callback) {
        let isResolved = true;
        const args = shared_utils_1.isNil(inject) ? this.reflectConstructorParams(wrapper.metatype) : inject;
        const instances = args.map((param) => {
            const paramWrapper = this.resolveSingleParam(wrapper, param, module, context);
            if (paramWrapper.isExported && !paramWrapper.isResolved) {
                isResolved = false;
            }
            return paramWrapper.instance;
        });
        isResolved && callback(instances);
    }
    reflectConstructorParams(type) {
        const paramtypes = Reflect.getMetadata(constants_1.PARAMTYPES_METADATA, type) || [];
        const selfParams = this.reflectSelfParams(type);
        selfParams.forEach(({ index, param }) => paramtypes[index] = param);
        return paramtypes;
    }
    reflectSelfParams(type) {
        return Reflect.getMetadata(constants_1.SELF_DECLARED_DEPS_METADATA, type) || [];
    }
    resolveSingleParam(wrapper, param, module, context) {
        if (shared_utils_1.isUndefined(param)) {
            throw new runtime_exception_1.RuntimeException();
        }
        return this.resolveComponentInstance(module, shared_utils_1.isFunction(param) ? param.name : param, wrapper, context);
    }
    resolveComponentInstance(module, name, wrapper, context) {
        const components = module.components;
        const instanceWrapper = this.scanForComponent(components, name, module, wrapper, context);
        if (!instanceWrapper.isResolved && !instanceWrapper.isExported) {
            this.loadInstanceOfComponent(components.get(name), module);
        }
        return instanceWrapper;
    }
    scanForComponent(components, name, module, { metatype }, context = []) {
        const component = this.scanForComponentInScopes(context, name, metatype);
        if (component) {
            return component;
        }
        const scanInExports = () => this.scanForComponentInExports(components, name, module, metatype, context);
        return components.has(name) ? components.get(name) : scanInExports();
    }
    scanForComponentInExports(components, name, module, metatype, context = []) {
        const instanceWrapper = this.scanForComponentInRelatedModules(module, name, context);
        if (!shared_utils_1.isNil(instanceWrapper)) {
            return instanceWrapper;
        }
        const { exports } = module;
        if (!exports.has(metatype.name)) {
            throw new unknown_dependencies_exception_1.UnknownDependenciesException(metatype.name);
        }
        return {
            instance: null,
            isResolved: false,
            isExported: true,
        };
    }
    scanForComponentInScopes(context, name, metatype) {
        context = context || [];
        for (const ctx of context) {
            const component = this.scanForComponentInScope(ctx, name, metatype);
            if (component)
                return component;
        }
        return null;
    }
    scanForComponentInScope(context, name, metatype) {
        try {
            const component = this.scanForComponent(context.components, name, context, { metatype }, null);
            if (!component.isResolved) {
                this.loadInstanceOfComponent(component, context);
            }
            return component;
        }
        catch (e) {
            return null;
        }
    }
    scanForComponentInRelatedModules(module, name, context) {
        const relatedModules = module.relatedModules || [];
        let component = null;
        relatedModules.forEach((relatedModule) => {
            const { components, exports } = relatedModule;
            const isInScope = context === null;
            if ((!exports.has(name) && !isInScope) || !components.has(name)) {
                return;
            }
            component = components.get(name);
            if (!component.isResolved) {
                const ctx = isInScope ? [module] : [].concat(context, module);
                this.loadInstanceOfComponent(component, relatedModule, ctx);
            }
        });
        return component;
    }
}
exports.Injector = Injector;
